1. Search functionality along with the API fetch call, Debouncing, button Focus() concepts using useRef(), map & filter,

import React, { useEffect, useRef, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "./App.css";

export default function App() {
  const initialRef = useRef(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(searchTerm);
  const [data, setData] = useState([]);

  const handleClick = () => {
    initialRef.current.focus();
  };

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
    }, 500);

    return () => {
      clearTimeout(handler);
    };
  }, [searchTerm]);

  useEffect(() => {
    const handleApi = async () => {
      try {
        const response = await fetch("https://jsonplaceholder.typicode.com/posts");
        const getData = await response.json();
        toast.success("Got the data");
        setData(getData);
      } catch (error) {
        toast.error("Error in fetching data");
      }
    };

    handleApi();
  }, []);

  const filteredData = data.filter((e) => 
    e.title.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
  );

  return (
    <div className="App">
      <h1>Hello Savitaar</h1>
      <ToastContainer position="top-right" autoClose={1000} />
      <input
        type="text"
        placeholder="Search by title..."
        ref={initialRef}
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
      <button onClick={handleClick}>Submit</button>
      {filteredData.length > 0 ? (
        <table>
          <thead>
            <tr>
              <th>Id</th>
              <th>Title</th>
              <th>Body</th>
            </tr>
          </thead>
          <tbody>
            {filteredData.map((e) => (
              <tr key={e.id}>
                <td>{e.id}</td>
                <td>{e.title}</td>
                <td>{e.body}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p>No data found</p>
      )}
    </div>
  );
}


2. Unit test case with Jest and React Testing Library

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import App from './App';
import fetchMock from 'jest-fetch-mock';
import { toast } from 'react-toastify';

// Mocking the toast for notification
jest.mock('react-toastify', () => ({
  toast: {
    success: jest.fn(),
  },
  ToastContainer: () => <div />,
}));

fetchMock.enableMocks();

describe('App Component', () => {
  beforeEach(() => {
    fetch.resetMocks();
  });

  test('renders App component', () => {
    render(<App />);
    expect(screen.getByText('Hello Savitaar')).toBeInTheDocument();
  });

  test('fetches data and displays in table', async () => {
    const mockPosts = [
      { id: 1, title: 'Post 1', body: 'Body 1' },
      { id: 2, title: 'Post 2', body: 'Body 2' },
    ];

    // Mock the fetch response
    fetch.mockResponseOnce(JSON.stringify(mockPosts));

    render(<App />);

    // Wait for the data to be fetched and rendered
    await waitFor(() => expect(screen.getByText('Post 1')).toBeInTheDocument());

    // Check if the data is displayed in the table
    expect(screen.getByText('Post 1')).toBeInTheDocument();
    expect(screen.getByText('Body 1')).toBeInTheDocument();
    expect(screen.getByText('Post 2')).toBeInTheDocument();
    expect(screen.getByText('Body 2')).toBeInTheDocument();

    // Check if toast notification was called
    expect(toast.success).toHaveBeenCalledWith('Got the data');
  });

  test('focuses input on button click', () => {
    render(<App />);

    const input = screen.getByRole('textbox');
    const button = screen.getByText('Submit');

    // Initially input is not focused
    expect(input).not.toHaveFocus();

    // Simulate button click
    fireEvent.click(button);

    // Input should be focused after button click
    expect(input).toHaveFocus();
  });
});



3. code 7 - A HTML page with a table, which is generated using JavaScript.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Table Generator</title>
    <style>
        td {
            width: 100px;
            height: 100px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid black;
            border-collapse: collapse;
        }
        table {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <h1>Table</h1>
    <div id="table"></div>

    <script>
        const tableOut = (row, col) => {
            let html = '<table>';
            
            for (let i = 1; i <= row; i++) {
                html += '<tr>';
                for (let j = 1; j <= col; j++) {
                    html += `<td></td>`;
                }
                html += '</tr>';
            }
            
            html += '</table>';
            return html;
        }

        const tableHTML = tableOut(3, 5);
        document.getElementById('table').innerHTML = tableHTML;
    </script>
</body>
</html>
